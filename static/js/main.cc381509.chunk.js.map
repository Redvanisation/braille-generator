{"version":3,"sources":["components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","Footer","for","title","type","id","name","href","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","callWatson","fetch","then","response","text","token","console","log","stream","recognizeMic","objectMode","extractResults","format","on","data","setState","alternatives","transcript","one","state","split","join","slice","length","textToBe","err","document","querySelector","onclick","stop","bind","catch","error","callBraille","concat","resp","json","braille","contents","translated","components_Header","onClick","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cc381509.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Header extends Component {\n    render() {\n        return (\n            <div className=\"header\">\n                <h1 className=\"heading-primary\">Braille Generator</h1>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render () {\n        return (\n            <div className=\"footer\">\n                <label className=\"help-btn\" for=\"checkbox\" title=\"Need Help?\"><span className=\"help-btn__icon\" title=\"Need Help?\">?</span></label>\n                <input className=\"footer__checkbox\"  type=\"checkbox\" id=\"checkbox\" name=\"checkbox\"></input>\n                <div className=\"footer__help-text\">\n                    <p className=\"footer__help-text--text\">\n                        <ol className=\"footer__help-text--ol\">\n                            <li className=\"footer__help-text--li\">\n                                First Click the Record Button and speak\n                            </li>\n                            <li className=\"footer__help-text--li\">\n                                Then Click the Stop button to save your transcripted text\n                            </li>\n                            <li className=\"footer__help-text--li\">\n                                Then Click the Convert button to convert it to Braille!\n                            </li>\n                        </ol>\n                    </p>\n                </div>\n                <p className=\"footer__text\">Coded by <a className=\"footer__link\" href=\"https://github.com/Redvanisation\">Redvanisation</a> &copy; 2018</p>\n            </div>\n        );\n\n    }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n// import Input from './components/Input';\n// import Output from './components/Output';\n\nimport recognizeMic from 'watson-speech/speech-to-text/recognize-microphone';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      text: '',\n      textToBe: '',\n      braille: ''\n    };\n  }\n\n  callWatson = () => {\n    fetch('http://localhost:3002/api/speech-to-text/token')\n    .then(function(response) {\n        return response.text();\n    }).then((token) => {\n      console.log(token);\n      var stream = recognizeMic({\n          token: token, // use `access_token` as the parameter name if using an RC service\n          objectMode: true, // send objects instead of text\n          extractResults: true, // convert {results: [{alternatives:[...]}], result_index: 0} to {alternatives: [...], index: 0}\n          format: false // optional - performs basic formatting on the results such as capitals an periods\n      });\n      stream.on('data', (data) => {\n        // console.log(data);\n        this.setState({\n          'text': data.alternatives[0].transcript\n        });\n\n\n\n\n        // const wht = '\\s*';\n        let one = this.state.text.split(' ').join('%20');\n\n        one = one.slice(0, one.length-3);\n\n        this.setState({\n          'textToBe': one\n        });\n\n        // console.log('text to be: ', this.state.textToBe);\n      });\n\n      stream.on('error', function(err) {\n          console.log(err);\n      });\n        document.querySelector('#stop').onclick = stream.stop.bind(stream);\n      }).catch(function(error) {\n          console.log(error);\n      });\n    \n  }\n\n  callBraille = () => {\n\n    fetch(`https://api.funtranslations.com/translate/braille/unicode.json?text=${this.state.textToBe}`)\n    .then((resp) => resp.json())\n    .then((data) => {\n      \n      this.setState({\n        braille: data.contents.translated.join(' ')\n      })\n      console.log(this.state.braille);\n    })\n\n}\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header />\n        <div className=\"main\">\n          {/* <h2 className=\"main__h2 heading-secondary\">Input</h2>\n          <br /> */}\n          {/* <h3 className=\"main__text\">Pl</h3> */}\n\n          <button className=\"main__btn main__btn--record\" onClick={this.callWatson}>Click to Record!</button>\n          <button className=\"main__btn main__btn--stop\" id=\"stop\">Stop Recording!</button>\n          \n          <div className=\"main__input-div\">{this.state.text}</div>\n\n\n          <button className=\"main__btn main__btn--convert\" onClick={this.callBraille}>convert to braille!</button>\n          <div className=\"main__output\">{this.state.braille}</div>\n\n\n        {/* <Input callWatson={this.callWatson.bind(this)} /> */}\n        {/* <Output {...this.props.braille} /> */}\n          {/* <h2 className=\"main__h2 heading-secondary\">Output</h2> */}\n        </div>\n        <Footer />\n      </div> \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './sass/main.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}